package repoimplhttp

import (
	"cashgramsvc/models"
	"encoding/json"
	"log"
	"net/http"
)

// ShortLink implements repo inteface to shorten links
type ShortLink struct {
	Client       *Client
	SLSvcBase    string
	BitlySvcBase string
}

// Short call url shortener service
func (s *ShortLink) Short(link string) (string, error) {
	url := s.SLSvcBase + "/cfutilservice/v1/shorten"
	p := &models.ShortLinkIntRequest{
		OriginalLink: link,
		Service:      "cashgram",
	}
	res, err := s.Client.PostJSON(url, nil, p)
	if err != nil {
		return "", &models.InternalError{models.AppError{Msg: models.InternalErrMsg}}
	}

	switch res.StatusCode {
	case http.StatusOK:
		data := &models.ShortLinkResponse{}
		if err := json.NewDecoder(res.Body).Decode(data); err != nil {
			log.Println("repoimplhttp#Short", err)
			return "", &models.InternalError{models.AppError{Msg: models.InternalErrMsg}}
		}
		if data.Status == 1 {
			return data.ShortURL, nil
		}
		log.Printf("repoimplhttp#Short Error response: %+v\n", data)
		return "", &models.InternalError{models.AppError{Msg: models.InternalErrMsg}}
	default:
		errorData := &map[string]string{}
		if err := json.NewDecoder(res.Body).Decode(errorData); err != nil {
			log.Println("repoimplhttp#Short", err)
			return "", &models.InternalError{models.AppError{Msg: models.InternalErrMsg}}
		}
		log.Printf("repoimplhttp#Short Invalid response: %+v\n", errorData)
	}
	return "", &models.InternalError{models.AppError{Msg: models.InternalErrMsg}}
}
