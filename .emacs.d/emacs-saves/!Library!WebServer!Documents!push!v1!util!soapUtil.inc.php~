<?php

class SoapUtil {

   public static function checkAxisBankTransferPushParams ($requestParams) {
      $metaData = array();
      $metaData["CUSTOMER_UNIQUE_NO"] = array("required" => TRUE, "type" => "alphanum");
      $metaData["PAYMENT_RUN_DATE"] = array("required" => FALSE, "type" => "dateTime");
      $metaData["CORP_CODE"] = array("required" => TRUE, "type" => "alphanum");
      $metaData["PRODUCT_CODE"] = array("required" => TRUE, "type" => "positiveFloat");
      $metaData["TRANSACTION_UTR_NO"] = array("required" => TRUE, "type" => "alphanum");
      $metaData["STATUS_CODE"] =  array("required" => TRUE, "type" => "safestring");
      $metaData["STATUS_DESCRIPTION"] =  array("required" => TRUE, "type" => "alphanum");
      $metaData["BATCH_NO"] =  array("required" => FALSE, "type" => "alphanum");
      $metaData["VENDOR_CODE"] =  array("required" => TRUE, "type" => "alphanum");
      $metaData["TRANSACTION_VALUE_DATE"] =  array("required" => TRUE, "type" => "alphanum");
      $metaData["BANK_REFERENCE_NUMBER"] =  array("required" => TRUE, "type" => "alphanum");
      $metaData["AMOUNT"] =  array("required" => TRUE, "type" => "alphanum");
      $metaData["CORP_ACC_NO"] =  array("required" => TRUE, "type" => "alphanum");
      $metaData["CORP_IFSC_CODE"] =  array("required" => TRUE, "type" => "alphanum");
      $metaData["DEBIT_CREDIT_INDICATOR"] =  array("required" => TRUE, "type" => "alphanum");
      $metaData["BENE_ACC_NO"] =  array("required" => TRUE, "type" => "alphanum");
      $metaData["CLIENT_BATCH_NO"] =  array("required" => TRUE, "type" => "safestring");
      return static::checkParams($metaData, $requestParams);
   }


   private static function checkParams ($metaData, $params) {
     foreach ($metaData as $key => $value) {
        $valid = TRUE;
        if ($value["required"] && (!isset($params[$key]))) {
          return array("status" => 0, "message" => $key." is missing");
        }
        else if (isset($params[$key])) {
          switch ($value["type"]) {
             case "alphanum":
                $valid = static::isAlphaNum(trim($params[$key]));
                break;
             case "positiveFloat":
                $valid = static::isPositiveFloat(trim($params[$key]));
                break;
             case "dateTime":
                $valid = static::isDateTime(trim($params[$key]));
                break;
             case "safestring":
                $valid = static::isSafeString(trim($params[$key]));
                break;
             default:
                break;
          }
        }

        if (!$valid) {
          return array("status" => 0, "message" => "Wrong data type for ". $key);
        }
      }
      return array("status" => 1, "message" => "Valid");
   }

   private static function isAlphaNum ($value) {
     return ctype_alnum($value);
   }

   private static function isDateTime ($value) {
     $format = 'Y-m-d H:i:s';
     $d = DateTime::createFromFormat($format, $value);
     if ($d && $d->format($format) == $value) { return TRUE;}
     return FALSE;
   }

   private static function isPositiveFloat ($value) {
     if (is_numeric($value) &&  floatval($value) > 0) {
       return TRUE;
     }
     return FALSE;
   }

   private static function isSafeString ($value) {
    if (preg_match('/^[\w ,.-]+$/', $value)) {
       return TRUE;
     }
     return FALSE;
   }
 }


?>
