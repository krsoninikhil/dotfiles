package delivery

import (
	"log"
	"net/http"

	"cashfree.com/payoutapi/domains"
	"cashfree.com/payoutapi/service"
	"github.com/labstack/echo"
)

// ConfigureBeneHandler injects service layer and add routes
func ConfigureBeneHandler(e *echo.Echo, bs service.Bene) {
	handler := &beneHandler{
		beneSvc: bs,
	}
	addHandlersV1(e, handler)
}

// TODO: response messages returned by handlers should be changed
func addHandlersV1(e *echo.Echo, handler *beneHandler) {
	urlPrefix := "/payout/v1"
	e.POST(urlPrefix+"/addBeneficiary", handler.Create)
	e.POST(urlPrefix+"/createGroup", handler.CreateGroup)
	// e.GET(urlPrefix+"/getBeneficiaries", handler.showAll)
	// e.GET(urlPrefix+"/getBeneficiaries/:beneId", handler.show)
	// e.GET(urlPrefix+"/getBeneId", handler.getBeneId)
	// e.GET(urlPrefix+"/removeBeneficiary", handler.destroy)
}

type beneHandler struct {
	beneSvc service.Bene
}

func (h *beneHandler) Create(c echo.Context) (err error) {
	params := domains.AddBeneRequest{}
	if err = domains.ValidateRequest(c, &params); err != nil {
		log.Println("beneHandler#create", err)
		return c.JSON(http.StatusBadRequest, domains.ErrorResponse{Message: err.Error()})
	}
	ctx := c.Request().Context()
	response, err := h.beneSvc.Create(ctx, params)
	if err != nil {
		log.Println("beneHandler#create", err)
		return c.JSON(http.StatusInternalServerError, domains.ErrorResponse{Message: err.Error()})
	}
	return c.JSON(http.StatusOK, response) // should be http.StatusCreated
}

func (h *beneHandler) CreateGroup(c echo.Context) (err error) {
	params := domains.CreateGroupRequest{}
	if err = domains.ValidateRequest(c, &params); err != nil {
		log.Println("beneHandler#createGroup", err)
		return c.JSON(http.StatusBadRequest, domains.ErrorResponse{Message: err.Error()})
	}
	ctx := c.Request().Context()
	response, err := h.beneSvc.CreateGroup(ctx, params)
	if err != nil {
		log.Println("beneHandler#create", err)
		return c.JSON(http.StatusInternalServerError, domains.ErrorResponse{Message: err.Error()})
	}
	return c.JSON(http.StatusOK, response) // should be http.StatusCreated
}

// func (h *beneHandler) showAll(c *echo.Context) (err error) {
// 	if err = validateRequest(c, &GetBenesRequest{}); err {
// 		log.Println("beneHandler#showAll", err)
// 		return c.JSON(http.StatusBadRequest, ErrorResponse{message: err.Error()})
// 	}
// }

// func (h *beneHandler) show(c *echo.Context) (err error) {
// 	if err = validateRequest(c, &GetBeneInfoRequest{}); err {
// 		log.Println("beneHandler#show", err)
// 		return c.JSON(http.StatusBadRequest, ErrorResponse{message: err.Error()})
// 	}
// }

// func (h *beneHandler) getBeneId(c *echo.Context) (err error) {
// 	if err = validateRequest(c, &GetBeneIdRequest{}); err {
// 		log.Println("beneHandler#getBeneId", err)
// 		return c.JSON(http.StatusBadRequest, ErrorResponse{message: err.Error()})
// 	}
// }

// func (h *beneHandler) destroy(c *echo.Context) (err error) {
// 	if err = validateRequest(c, &RemoveBeneRequest{}); err {
// 		log.Println("beneHandler#destroy", err)
// 		return c.JSON(http.StatusBadRequest, ErrorResponse{message: err.Error()})
// 	}
// }
