package repoimplhttp

import (
	"encoding/json"
	"log"
	"net/http"
	"payoutapi/domains"
)

func parseCreateResponse(res *http.Response) (*domains.CreateIntResponse, error) {
	defer res.Body.Close()

	switch res.StatusCode {
	case http.StatusCreated:
		data := &domains.CreateIntResponse{}
		if err := json.NewDecoder(res.Body).Decode(data); err != nil {
			log.Println("repoimplhttp#parseCreateResponse", err)
			return nil, getServerAppError()
		}
		return data, nil
	case http.StatusConflict, http.StatusUnprocessableEntity: // 409, 422
		data := &domains.ErrorIntResponse{}
		if err := json.NewDecoder(res.Body).Decode(data); err != nil {
			log.Println("repoimplhttp#parseCreateResponse", err)
			return nil, getServerAppError()
		}
		return nil, getUserAppError(data)
	case http.StatusInternalServerError, http.StatusPreconditionFailed: // 500, 412
		return nil, getServerAppError()
	}

	log.Printf("repoimplhttp#parseCreateResponse Error Response: (HTTP Status: &d) %s", res.StatusCode, res)
	return nil, getServerAppError()
}

func parseGetResponse(res *http.Response, data interface{}) error {
	defer res.Body.Close()

	switch res.StatusCode {
	case http.StatusOK:
		if err := json.NewDecoder(res.Body).Decode(data); err != nil {
			log.Println("repoimplhttp#parseGetResponse", err)
			return getServerAppError()
		}
		return nil
	case http.StatusNotFound:
		errorData := &domains.ErrorIntResponse{}
		if err := json.NewDecoder(res.Body).Decode(data); err != nil {
			log.Println("repoimplhttp#parseGetResponse", err)
			return getServerAppError()
		}
		return getNotFoundError(errorData)
	}

	log.Printf("repoimplhttp#parseGetResponse Error Response: (HTTP Status: &d) %s", res.StatusCode, res)
	return getServerAppError()
}

func parseDestroyResponse(res *http.Response) (*domains.DestroyIntResponse, error) {
	defer res.Body.Close()

	switch res.StatusCode {
	case http.StatusOK:
		data := &domains.DestroyIntResponse{}
		if err := json.NewDecoder(res.Body).Decode(data); err != nil {
			log.Println("repoimplhttp#parseDestroyResponse", err)
			return nil, getServerAppError()
		}
		return data, nil
	case http.StatusNotFound:
		data := &domains.ErrorIntResponse{}
		if err := json.NewDecoder(res.Body).Decode(data); err != nil {
			log.Println("repoimplhttp#parseDestroyResponse", err)
			return nil, getServerAppError()
		}
		return nil, getNotFoundError(data)
	}

	log.Printf("repoimplhttp#parseDestroyResponse, Error Response: (HTTP Status: &d) %s", res.StatusCode, res)
	return nil, getServerAppError()
}
