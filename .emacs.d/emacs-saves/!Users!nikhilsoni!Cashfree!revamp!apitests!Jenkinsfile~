#!/usr/bin/env groovy
def appName = 'cashgramsvc'

podTemplate(label: 'build-go',
    containers: [
        containerTemplate(name: 'go-build-dep', image: 'docker-registry.cashfree.com/go-build:1.12.9', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'docker', image: 'docker-registry.cashfree.com/cashfree-docker:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'sonar-scanner', image: 'docker-registry.cashfree.com/cashfree-sonar-scanner:latest', command: 'cat', ttyEnabled: true),
        containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.8.0', command: 'cat', ttyEnabled: true)
    ],
    imagePullSecrets: ['regsecret'],
    volumes: [
        hostPathVolume(hostPath: '/jenkins/go/pkg', mountPath: '/dep/pkg'),
        hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock')
    ]
  ) {
    node('build-go') {

        def deploymentId = UUID.randomUUID().toString()
        def buildNumber = env.BUILD_NUMBER
        def myRepo = checkout scm
        def gitBranch = myRepo.GIT_BRANCH
        def commit = myRepo.GIT_COMMIT
        def isMasterBranch = false;
        def isReleaseBranch = false;
        def packageVersion = "0.0.0";
        def isPr = false;
        def isFeatureBranch = false;
        if (gitBranch == 'master') {
          isMasterBranch = true;
        } else if (gitBranch =~'release.*') {
          isReleaseBranch = true;
        } else if(env.CHANGE_ID) {
          isPr = true;
        } else {
          try {
            timeout(time: 15, unit: 'SECONDS') {
              input message: "Do you need to build this branch ${gitBranch} ?", parameters: [
                        [$class: 'BooleanParameterDefinition', defaultValue: false, description: "Do you need to build this branch ${gitBranch} ?", name: 'Ready']]
            }
          } catch (err) {
            return;
          }

          isFeatureBranch = true;
        }


        stage('build') {
          container('go-build-dep') {
            packageVersion = sh(
              script: 'make version',
              returnStdout: true
              ).trim()
            sh """
            ln -s /dep/pkg \$GOPATH/pkg
            echo '${appName}'
            ln -s \$(realpath .) \$GOPATH/src/${appName}
            cd \$GOPATH/src/${appName}
            make linux
            """
            // Need to send report to sonarqube here
          }
        }


        stage('sonar-generation') {
          container('sonar-scanner') {
            withCredentials([string(credentialsId: 'sonar', variable: 'SONAR_TOKEN')]) {
              sh """
              sonar-scanner -Dsonar.login=${SONAR_TOKEN}
              """
            }
          }
        }


        if (isFeatureBranch) {
          return;
        }


        if (isPr) {
          try {
            timeout(time: 15, unit: 'SECONDS') {
            input message: "Ready to deploy PR ${gitBranch} ?", parameters: [
                        [$class: 'BooleanParameterDefinition', defaultValue: false, description: "Ready to deploy PR ${gitBranch} ?", name: 'Ready']]
            }
          } catch (err) {
            return;
          }
        }


        stage('docker build and push') {
          container('docker') {
            withCredentials([[$class: 'UsernamePasswordMultiBinding',
                  credentialsId: 'nexus',
                  usernameVariable: 'NEXUS_USER',
                  passwordVariable: 'NEXUS_PASSWORD']]) {

              if (isReleaseBranch) {
                packageVersion = packageVersion+"."+buildNumber;
              } else {
                packageVersion = packageVersion+"-SNAPSHOT";
              }
              def dockerImage = "${appName}:${packageVersion}";
              sh """
              docker login docker-registry.cashfree.com -u ${NEXUS_USER} -p ${NEXUS_PASSWORD}
              docker build -t ${appName} .
              docker tag ${appName} docker-registry.cashfree.com/${dockerImage}
              docker push docker-registry.cashfree.com/${dockerImage}
              """
            }
          }
        }


        stage("Deploy to k8s") {
          container('kubectl') {
            sh "kubectl apply -f  k8s/master/configmap.yaml"
            sh "cat k8s/master/deployment.yaml | sed \"s/{{DEPLOYMENT_ID}}/${commit}/g\" | kubectl apply -f -"
            sh "kubectl apply -f  k8s/master/service.yaml"
          }
        }
    }
}