package delivery

import (
	"log"
	"net/http"
	"urlshortenersvc/service"
	"urlshortenersvc/validator"

	"github.com/labstack/echo"
)

func ConfigureShortHandler(e *echo.Echo, ssvc service.Short) {
	h := &shortHandler{shortSvc: ssvc}
	addShortHandlersV1(e, h)
}

func addShortHandlersV1(e *echo.Echo, h *shortHandler) {
	e.POST("/v1/short", h.short)
}

type shortHandler struct {
	shortSvc service.Short
}

func (h *shortHandler) short(c *echo.Context) {
	params := &models.ShortRequest{}
	if err := parseRequest(c, params); err != nil {
		return getErrorResponse(c, "create", err)
	}

	res, err := h.cgSvc.Create(c.Request().Context(), accountID, params)
	if err != nil {
		return getErrorResponse(c, "create", err)
	}
	return c.JSON(http.StatusCreated, res)
}

// parseRequest validates the request parameters
func parseRequest(c echo.Context, i interface{}) (err error) {
	if err = validator.BindValidation(c.Request().Body, i); err != nil {
		return &models.ParseError{
			AppError: models.AppError{Msg: err.Error()},
		}
	}

	if err = c.Validate(i); err != nil {
		return &models.ValidationError{
			AppError: models.AppError{Msg: err.Error()},
		}
	}
	return nil
}

func getErrorResponse(c echo.Context, src string, err error) error {
	log.Println(logPre+src, err)
	switch err.(type) {
	case *models.ParseError:
		// for 400 vs 412, see: https://stackoverflow.com/a/10730895/3504244
		return c.JSON(http.StatusBadRequest, &models.Problem{"INVALID_REQUEST_BODY", err.Error()})
	case *models.ValidationError, *models.InvalidExpiryError:
		return c.JSON(http.StatusUnprocessableEntity, &models.Problem{"INVALID_PARAMS", err.Error()})
	case *models.InternalError:
		log.Println(logPre+src, "Server Error from service:", err)
		return c.JSON(http.StatusInternalServerError, &models.Problem{"INTERNAL_ERROR", models.InternalErrMsg})
	}

	log.Println(logPre+src, "Unknown error returned from service:", err)
	return c.JSON(http.StatusInternalServerError, &models.Problem{"INTERNAL_ERROR", models.InternalErrMsg})
}
