<?php

class InputCheck {

   public static function checkTransferParams($transferParams) {
      $metaData = array();
      $metaData["customerCode"] = array("required" => TRUE, "type" => "alphanum");
      $metaData["productCode"] = array("required" => FALSE, "type" => "alphanum");
      $metaData["paymentId"] = array("required" => TRUE, "type" => "alphanum");
      $metaData["amount"] = array("required" => TRUE, "type" => "positiveFloat");
      $metaData["utr"] =  array("required" => TRUE, "type" => "alphanum");
      $metaData["remitterAccount"] = array("required" => TRUE, "type" => "alphanum");
      $metaData["remitterIfsc"] = array("required" => TRUE, "type" => "alphanum");
      $metaData["remitterName"] = array("required" => FALSE, "type" => "safestring");
      $metaData["remitterAddress"] = array("required" => FALSE, "type" => "safestring");
      return static::checkParams ($metaData, $transferParams);
   }

   public static function checkNotifyParams ($notifyParams) {
      $metaData = array();
      $metaData["customerCode"] = array("required" => TRUE, "type" => "alphanum");
      $metaData["productCode"] = array("required" => FALSE, "type" => "alphanum");
      $metaData["paymentId"] = array("required" => TRUE, "type" => "alphanum");
      $metaData["amount"] = array("required" => TRUE, "type" => "positiveFloat");
      $metaData["depositTime"] = array("required" => TRUE, "type" => "dateTime");
      $metaData["utr"] =  array("required" => TRUE, "type" => "alphanum");
      $metaData["remarks"] =  array("required" => TRUE, "type" => "safestring");
      $metaData["transferType"] =  array("required" => TRUE, "type" => "alphanum");
      $metaData["creditRefNo"] =  array("required" => FALSE, "type" => "alphanum");
      return static::checkParams ($metaData, $notifyParams);
   }


   private static function checkParams ($metaData, $params) {
     foreach ($metaData as $key => $value) {
        $valid = TRUE;
        if ($value["required"] && (!isset($params[$key]))) {
          return array("status" => 0, "message" => $key." is missing");
        }
        else if (isset($params[$key])) {
          switch ($value["type"]) {
             case "alphanum":
                $valid = static::isAlphaNum(trim($params[$key]));          
                break;
             case "positiveFloat":
                $valid = static::isPositiveFloat(trim($params[$key]));          
                break;
             case "dateTime":
                $valid = static::isDateTime(trim($params[$key]));          
                break;
             case "safestring":
                $valid = static::isSafeString(trim($params[$key]));          
                break;
             default:
                break; 
          }
        }

        if (!$valid) {
          return array("status" => 0, "message" => "Wrong data type for ". $key);
        }
      }
      return array("status" => 1, "message" => "Valid");
   }

   private static function isAlphaNum ($value) {
     return ctype_alnum($value); 
   }

   private static function isDateTime ($value) {
     $format = 'Y-m-d H:i:s';
     $d = DateTime::createFromFormat($format, $value);
     if ($d && $d->format($format) == $value) { return TRUE;}
     return FALSE;
   }

   private static function isPositiveFloat ($value) {
     if (is_numeric($value) &&  floatval($value) > 0) {
       return TRUE;
     } 
     return FALSE;
   }

   private static function isSafeString ($value) {
    if (preg_match('/^[\w ,.-]+$/', $value)) { 
       return TRUE;
     } 
     return FALSE;
   }
 }


?>
