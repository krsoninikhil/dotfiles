/* CASHFREE INC. PROPRIETARY AND CONFIDENTIAL
 * ------------------------------------------
 * Copyright (C) Cashfree Inc - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 *
 * Description: Define a type for collecting validation errors.
 *
 * Author: Nikhil Soni <nikhil@cashfree.com> April, 2019
 */

package validator

import (
	"errors"
	"strings"
)

type errorCollector []error

func (c *errorCollector) collect(e error) {
	*c = append(*c, e)
}

func (c *errorCollector) create(fld string, tag string, param string) error {
	var message string
	switch tag {
	case "required":
		message = "is missing in the request"
	case "_datevalid":
		message = "is a date field and should be of type YYYY-MM-DD"
	case "min":
		message = "should be at least " + param
	case "max":
		message = "should be at max " + param
	case "_alphaspace":
		message = "can contain only aphabets and space"
	case "_alphanumus":
		message = "can contain only aphabets and numbers"
	case "_vpa":
		message = "can contain only alphanum, period (.), underscore (_) and at sign (@)"
	default:
		message = "is invalid"
	}
	return errors.New(fld + " " + message)
}

func (c *errorCollector) Error() string {
	message := ""
	for _, e := range *c {
		message += e.Error() + ", "
	}
	message = strings.TrimRight(message, ", ")
	return message
}
