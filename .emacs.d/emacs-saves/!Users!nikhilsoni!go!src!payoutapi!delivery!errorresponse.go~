package delivery

import (
	"encoding/json"
	"net/http"
	"payoutapi/domains"
	"payoutapi/validator"
	"strconv"

	"github.com/labstack/echo"
)

// _HTTPError can used by delivery layer directly
type _HTTPError struct {
	StatusCode int
	*domains.AppError
}

// ValidateRequest validates the request parameters
func validateRequest(c echo.Context, i interface{}) (err error) {
	if err = validator.BindValidation(c.Request().Body, i); err != nil {
		httpError := &_HTTPError{
			AppError:   &domains.AppError{Msg: err.Error()},
			StatusCode: http.StatusUnprocessableEntity,
		}
		if _, ok := err.(*json.SyntaxError); ok {
			// this is not required and only done to maintain the already published API contract
			httpError.StatusCode = http.StatusPreconditionFailed
		}
		return httpError
	}

	if err = c.Validate(i); err != nil {
		return &_HTTPError{
			AppError:   &domains.AppError{Msg: err.Error()},
			StatusCode: http.StatusUnprocessableEntity,
		}
	}
	return nil
}

func getBadRequestResponse(err error) *domains.PayoutResponse {
	status := "422"
	if httpError, ok := err.(*_HTTPError); ok {
		status = strconv.Itoa(httpError.StatusCode)
	}
	return &domains.PayoutResponse{"ERROR", status, err.Error(), nil}
}

// getDepricatedResponse returns warning message for depricated API
func getDepricatedResponse() *domains.PayoutResponse {
	return &domains.PayoutResponse{"ERROR", "410", "This api has been removed. If you're doing everything right, you don't need it.", nil}
}

// getErrorResponse returns a general response for internal server error
func getErrorResponse() *domains.PayoutResponse {
	return &domains.PayoutResponse{"ERROR", "500", "Unknown error occured! Please try again in a moment.", nil}
}
