package repoimplhttp

import (
	"bytes"
	"encoding/json"
	"log"
	"net/http"
	"time"
)

type Client struct {
	*http.Client
}

// Init initializes a HTTP client with boilerplate code for requests
func Init() *Client {
	to, _ := time.ParseDuration("30s")
	return &Client{
		&http.Client{Timeout: to},
	}
}

// Get make an HTTP GET request
func (c *Client) Get(uri string, headers map[string][]string, res interface{}) int {
	req, _ := http.NewRequest(http.MethodGet, uri, nil)
	return c.doRequest(req, headers, res)
}

// PostJSON add content type header and make an HTTP POST request
func (c *Client) PostJSON(uri string, headers map[string][]string, params interface{}, res interface{}) int {
	jParams, _ := json.Marshal(params)
	req, _ := http.NewRequest(http.MethodPost, uri, bytes.NewBuffer(jParams))
	headers["Content-Type"] = []string{"application/json"}
	return c.doRequest(req, headers, res)
}

// Delete make an HTTP DELETE request
func (c *Client) Delete(uri string, headers map[string][]string, res interface{}) int {
	req, _ := http.NewRequest(http.MethodDelete, uri, nil)
	return c.doRequest(req, headers, res)
}

func (c *Client) doRequest(req *http.Request, headers map[string][]string, data interface{}) int {
	req.Header = headers
	res, err := c.Do(req)
	if err != nil {
		log.Println("repoimplhttp#doRequest", err)
		return http.StatusInternalServerError
	}
	defer res.Body.Close()

	if err = json.NewDecoder(res.Body).Decode(&data); err != nil {
		return http.StatusInternalServerError
	}
	return res.StatusCode
}
