// Package logger depends on models.ContextKey and models.RequestHeaders
// Defines logging interface for application
//
// Logging functions provided here are wrapper around uber zap logger.
// Usage example:
// `logger.Info(ctx, "action", err, logger.Field("f1", "v1"), logger.Field("f2", "v2"))`
//
// Using standard `log` also logs as JSON, with additional field like:
// `{"level": "info", "logger": "STANDARD"}`
package logger

import (
	"cashgramsvc/config"
	"cashgramsvc/models"
	"context"
	"fmt"
	"log"

	"go.uber.org/zap"
)

const (
	reqIDKey = "x-request-id"
)

var (
	l *zap.Logger
)

// Init initializes the zap logger as global variables
func Init(appCfg *config.Config) {
	// configure console output keys
	eCfg := zap.NewProductionEncoderConfig() // pre defined, opinionated
	eCfg.MessageKey = "message"              // default is msg

	cfg := zap.NewProductionConfig()
	cfg.EncoderConfig = eCfg
	if appCfg.Debug {
		cfg.Level = zap.NewAtomicLevelAt(zap.DebugLevel)
	}

	logger, err := cfg.Build()
	if err != nil {
		log.Fatalln("Cannot initialize logger")
	}

	// redirect logs done using standard log package
	s := logger.Named("STANDARD")
	_ = zap.RedirectStdLog(s)

	l = logger.WithOptions(zap.AddCallerSkip(1))
}

// Field provides a interface to use zap field
func Field(k string, v interface{}) zap.Field {
	return zap.Any(k, v)
}

// Debug wraps debug logger for general debugging information
func Debug(ctx context.Context, act string, msg interface{}, fields ...zap.Field) {
	l.Debug(fmt.Sprint(msg), addCommonFields(ctx, act, fields)...)
}

// Info wraps info logger for handler layer
func Info(ctx context.Context, act string, msg interface{}, fields ...zap.Field) {
	l.Info(fmt.Sprint(msg), addCommonFields(ctx, act, fields)...)
}

// Warn wraps info logger for handler layer
func Warn(ctx context.Context, act string, msg interface{}, fields ...zap.Field) {
	l.Warn(fmt.Sprint(msg), addCommonFields(ctx, act, fields)...)
}

// Error wraps error logger for handler layer
func Error(ctx context.Context, act string, err interface{}, fields ...zap.Field) {
	l.Error(fmt.Sprint(err), addCommonFields(ctx, act, fields)...)
}

func addCommonFields(ctx context.Context, act string, f []zap.Field) []zap.Field {
	reqID := ""
	rh, ok := ctx.Value(models.ContextKey("RequestHeaders")).(models.RequestHeaders)
	if ok {
		reqID = rh.XRequestID
	}

	return append(
		f,
		zap.String(reqIDKey, reqID),
		zap.String("action", act),
	)
}
