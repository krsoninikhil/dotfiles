package validator

// BindValidation binds the given stream to the underlying type passed
// as interface. Error retured are end user friendly.
func (cv *CustomValidator) BindValidation(i interface{}) error {

// ValidateRequest validates the request parameters
func validateRequest(c echo.Context, i interface{}) (err error) {
	if err = c.Bind(i); err != nil {
		if echoErr, ok := err.(*echo.HTTPError); ok {
			// customize error message here
			log.Printf("httperror %+v", echoErr.Message)
			log.Printf("httperror %+v\n", echoErr.Internal)
			switch jsonError := echoErr.Internal.(type) {
			case *json.UnmarshalTypeError:
				err = fmt.Errorf("%s should be %s not %s", jsonError.Field, jsonError.Type, jsonError.Value)
			default: // json.SyntaxError:
				err = fmt.Errorf("Post data is empty or not a valid JSON")
			}
		}
		return err
	}

	if err = c.Validate(i); err != nil {
		// this Validate method has been configured to use
		// third party validator package; error messages are
		// also customized and can be returned to user
		// directly
		return err
	}
	return nil
}
