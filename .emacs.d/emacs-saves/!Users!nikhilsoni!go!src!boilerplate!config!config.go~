/* CASHFREE INC. PROPRIETARY AND CONFIDENTIAL
 * ------------------------------------------
 * Copyright (C) Cashfree Inc - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 *
 *
 * Author: Nikhil Soni <nikhil@cashfree.com> April, 2019
 */

package config

import (
	"log"
	"os"

	"github.com/spf13/viper"
)

const configPathEnv = "CASHGRAMSVC_CONFIG"

// Config provide required configuration fields from passed file
type Config struct {
	Debug      bool                      `yaml:"debug"`
	Port       string                    `yaml:"port"`
	Stage      string                    `yaml:"stage"`
	Timeout    string                    `yaml:"timeout"`
	SvcBase    svcBase                   `yaml:"svcbase"`
	RateLimits map[string]map[string]int `yaml:"ratelimits"`
}

type svcBase struct {
	Beneficiary    string `yaml:"beneficiary"`
	Transfer       string `yaml:"transfer"`
	BatchTransfer  string `yaml:"batchtransfer"`
	Auth           string `yaml:"auth"`
	Account        string `yaml:"account"`
	Cashgram       string `yaml:"cashgram"`
	BankValidation string `yaml:"bankvalidation"`
	Cache          string `yaml:"cache"`
}

// LoadConfig returns configuration read from file path set in env
func LoadConfig() *Config {
	configPath, _ := os.LookupEnv(configPathEnv)
	if configPath == "" {
		log.Fatalln("Configuration file path not found in", configPathEnv)
	}
	log.Println("Loading configuration from", configPath)

	viper.SetConfigFile(configPath)
	if err := viper.ReadInConfig(); err != nil {
		log.Fatalln("Cannot read config file:", err)
	}
	config := &Config{}
	if err := viper.Unmarshal(config); err != nil {
		log.Fatalln("Cannot decode config file:", err)
	}

	return config
}
