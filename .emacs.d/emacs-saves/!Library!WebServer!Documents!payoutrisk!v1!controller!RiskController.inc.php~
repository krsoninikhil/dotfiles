<?php

require_once(ROOT."/v1/controller/BaseController.inc.php");
require_once(PAYOUTCORE."/controller/MPABeneficiaryController.inc.php");

class BeneController extends BaseController {

    public static function addNew($f3) {
        $data = $f3->get('BODY');
        $validationMessage = static::validateNewRequest($data);
        if ($validationMessage) {
            PayoutInternalUtil::sendBadRequest($f3, $validationMessage);
        }

        $dbHandle = DbUtil::getHandle();
        $data["accountId"] = $f3->get("accountId");
        $beneId = $data["beneId"];
        $data = static::setDefaults($data);
        $beneResponse = MPABeneficiaryController::getBeneIdFromDetails($dbHandle, $data, $data["mode"]);
        if ($beneResponse["status"]) {
            $beneId = $beneResponse["beneId"];
            $message = "Returning existing beneId with same details";
            error_log("CF_INFO :: PAYOUT_INTERNAL :: ADD_BENE :: Existing bene (beneId: {$beneId}) found for: ".json_encode($data));
        } else {
            $beneResponse = MPABeneficiaryController::addBeneficiary($dbHandle, $data);
            $message = $beneResponse["message"];
            if (!$beneResponse["status"]) {
                if ($beneResponse["subCode"] == "409") {
                    $delResponse = MPABeneficiaryController::removeBeneficiary($dbHandle, $data);
                    $beneResponse = MPABeneficiaryController::addBeneficiary($dbHandle, $data);
                    if ($beneResponse["status"]) {
                        $message = "Beneficiary succesfully added!";
                    } else {
                        $message = !$delResponse["status"] ? $delResponse["message"] : $beneResponse["message"];
                        error_log("CF_ERROR :: PAYOUT_INTERNAL :: ADD_BENE :: Error for beneId {$beneId}: {$message}");
                        PayoutInternalUtil::sendErrorResponse($f3, $beneResponse["subCode"], $message);
                    }
                } else {
                    PayoutInternalUtil::sendErrorResponse($f3, $beneResponse["subCode"], $beneResponse["message"]);
                }
            }
        }

        $f3->status(200);
        $response = array(
            "status" => 1,
            "beneId" => $beneId,
            "message" => $message 
        );
        PayoutInternalUtil::outputResponse($f3, $response);
    }

    public static function find($f3) {
        $beneId = $f3->get('PARAMS.beneId');
        $accountId = $f3->get("accountId");
        $dbHandle = DbUtil::getHandle();
        $bene = array("beneId" => $beneId, "accountId" => $accountId);
        $beneResponse = MPABeneficiariesDbUtil::getMerchantBeneficiaryDetails($dbHandle, $bene);
        if ($beneResponse) {
            $f3->status(200);
            $response = array(
                "status" => 1,
                "beneId" => $beneId,
                "beneDetails" => $beneResponse 
            );
            PayoutInternalUtil::outputResponse($f3, $response);
        } else {
            PayoutInternalUtil::sendResourceNotFoundResponse($f3, array("name" => "beneficiary", "value" => $beneId));
        }
    } 

    private static function validateNewRequest($request) {
        if (!isset($request["beneId"])) {
            return "beneId is required!";
        }
        
        if (!isset($request["name"])) {
            return "name is required!";
        }
        
        if (!isset($request["phone"])) {
            return "phone is required!";
        }

        $mode = empty($request["mode"]) ? "" : $request["mode"];
        if ($mode == "banktransfer") {
            if (empty($request["bankAccount"]) || empty($request["ifsc"])) {
                return "a valid bankAccount and ifsc combination is required if mode is 'banktransfer'";
            }
        } else if ($mode == "upi") {
            if (empty($request["vpa"])) {
                return "a valid VPA is required if mode is 'upi'";
            }
        } else if ($mode == "card" && empty($request["cardNo"])) {
            if (empty($request["vltCardId"]) ^ empty($request["maskedCard"])) {
                return "cardNo or a combination of vltCardId and maskedCard is required if mode is 'card'";
            } 
        } 
    }

    private static function setDefaults($data) {
        if (empty($data["email"])) {
            $data["email"] = $data["phone"]."@cashfree.com";
        }
        if (empty($data["address1"])) {
            $data["address1"] = "NA";
        }
        if (!isset($data["vltCardId"])) {
            $data["vltCardId"] = "";
        }
        if (!isset($data["cardNo"])) {
            $data["cardNo"] = "";
        }
        if (!isset($data["bankAccount"])) {
            $data["bankAccount"] = "";
        }
        if (!isset($data["ifsc"])) {
            $data["ifsc"] = "";
        }
        return $data;
    }
}


?>